<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于用户的协同过滤算法在显式、隐式反馈数据中的评估比较]]></title>
    <url>%2F2019%2F04%2F11%2F%E5%9F%BA%E4%BA%8E%E7%94%A8%E6%88%B7%E7%9A%84%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95%E5%9C%A8%E6%98%BE%E5%BC%8F%E3%80%81%E9%9A%90%E5%BC%8F%E5%8F%8D%E9%A6%88%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E8%AF%84%E4%BC%B0%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[问题描述实现基于用户的协同过滤（UserCF）算法，以TopN的推荐方式，分别在显式和隐式反馈数据集中进行评估和比较。 实验采用Grouplens团队提供的公开数据集Movielens-latest-small，包括671个用户对9125部电影的100004条评分，并将数据以6比2的比例随机分为训练集和测试集。 隐式反馈只考虑用户是否看过电影，显式反馈考虑用户对电影的评分。 算法描述UserCF算法是一种基于统计学的方法，目标是通过分析用户的历史行为，为用户推荐和他相似的用户喜欢的物品，因此算法中的一个重要内容便是计算用户的相似度。 UserCF算法中相似度的计算是一种近邻模型，中心思想是通过寻找k个近邻用户来模拟主体的行为（KNN），寻找近邻用户需要一个指标来衡量用户间近邻程度，简易的计算方法如下（给定用户u和用户v，N(u)表示用户u喜欢的物品集合，N(v)表示用户v喜欢的物品集合）： 杰卡德相似度 余弦相似度 算法步骤： 1.读取数据，建立用户 – 物品数据结构，如下图所示： 用户A喜欢物品a、b、c，用户B喜欢物品a、c，以此类推。 2.建立物品 – 用户倒排表，如下图所示。目的是在计算相似度时排除那些 |N(u) ∩ N(v)|= 0的数据，只需要扫描倒排表就可以计算出|N(u) ∩ N(v)|≠ 0的用户组合。 3.利用余弦相似度构建相似度矩阵，如用户A和用户B的相似度计算如下： 4.寻找K近邻相似用户。 5.计算用户评分，w表示用户相似度，r表示用户的反馈评分。 6.得出TopN推荐列表。 评价指标通过计算选取不同近邻用户K值时的准确率、召回率和F1值对算法进行评估。 准确率、召回率和F1值的定义请参考 推荐系统发展综述 - 4.推荐方式和效果评估 实验结果实验结果中TopN的N值为选取的用户相似度较大的N个用户作为近邻用户，非最终推荐列表的TopN。 1.隐式反馈 从图中可以看到，当N取18时，F1值最大为0.15，此时召回率为0.23，准确率为0.1，可以看出仅考虑隐式反馈时，通过UserCF算法得到的推荐列表结果并不是很理想。 2.显式反馈 当N取16时，F1值最大为0.2，此时召回率为0.27，准确率为0.17，相比较隐式反馈结果有所提升。 随着N的增大，显式和隐式反馈数据推荐结果的召回率逐渐上升，这是因为所选择的近邻用户越多，为用户推荐的物品就越多，因此召回率会大大增加，而相反，准确率则会逐渐下降。 总结UserCF算法是通过统计学的方法来挖掘用户历史行为数据的规律，隐式反馈数据中所体现的用户行为规律较为粗糙，不利于发现和挖掘，而显示反馈数据能够对用户的行为进行一定的偏好划分，更具有代表性。 因此协同过滤算法通常考虑显式反馈数据，最直观的显式反馈数据是评分数据，常用在音乐、视频服务推荐中。电商平台中的浏览、收藏、加入购物车、购买等行为也可以体现出不同层面的用户偏好，比如购买代表的偏好程度最高，浏览代表的最低，以此分级也可作为显式反馈数据。 参考：项亮. 推荐系统实践[M]. 北京: 人民邮电出版社, 2012.]]></content>
      <categories>
        <category>推荐系统</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
        <tag>协同过滤</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐系统综述：初识推荐系统]]></title>
    <url>%2F2019%2F04%2F11%2F%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%BB%BC%E8%BF%B0%EF%BC%9A%E5%88%9D%E8%AF%86%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[引言随着信息技术和互联网技术的发展，人们从信息匮乏时代步入了信息过载时代，在这种时代背景下，人们越来越难从大量的信息中找到自身感兴趣的信息，信息也越来越难展示给可能对它感兴趣的用户，而推荐系统的任务就是连接用户和信息，创造价值。 设想用户想买一本《Recommender Systems An Introduction》，用户只需要走进一家书店，寻找这本书即可。通过互联网，用户可以打开当当，在搜索框中输入书名，然后就可以找到用户想要购买的书籍，这两种方式都需要用户有明确的目的，如购买《Recommender Systems An Introduction》或某一类别的书籍。 但是，当用户没有明确目标时，比如寻找感兴趣的音乐，用户只能通过一些预先设定的类别或标签去寻找他可能感兴趣的音乐，但面对如此之多音乐，用户很难在短时间内找出真正感兴趣的音乐。这时就需要一个自动化的工具，来分析用户曾经收听的音乐，进而寻找出用户可能感兴趣的音乐推荐给用户，这就是个性化推荐系统的工作。 作为一种信息过滤系统，推荐系统具有以下两个最显著的特性： （1）主动化。从用户角度考虑，门户网站和搜索引擎都是解决信息过载的有效方式，但它们都需要用户提供明确需求，当用户无法准确描述自己的需求时，这两种方式就无法为用户提供精确的服务了。而推荐系统不需要用户提供明确的需求，而是通过分析用户和物品的数据，对用户和物品进行建模，从而主动为用户推荐他们感兴趣的信息。 （2）个性化。推荐系统能够更好的发掘长尾信息，即将冷门物品推荐给用户。热门物品通常代表绝大多数用户的兴趣，而冷门物品往往代表一小部分用户的个性化需求，在电商平台火热的时代，由冷门物品带来的营业额甚至超过热门物品，发掘长尾信息是推荐系统的重要研究方向。 目前，推荐系统已广泛应用于诸多领域，其中最典型的便是电子商务领域。同时，伴随着机器学习、深度学习的发展，工业界和学术界对推荐系统的研究热情更加高涨，形成了一门独立的学科。 发展历史推荐系统是互联网时代的一种信息检索工具，自上世纪90年代起，人们便认识到了推荐系统的价值，经过了二十多年的积累和沉淀，推荐系统逐渐成为一门独立的学科在学术研究和业界应用中都取得了很多成果。 1994 年明尼苏达大学GroupLens研究组推出第一个自动化推荐系统 GroupLens[1]。提出了将协同过滤作为推荐系统的重要技术，这也是最早的自动化协同过滤推荐系统之一。 1997 年 Resnick 等人[2]首次提出推荐系统（recommendersystem，RS）一词，自此，推荐系统一词被广泛引用，并且推荐系统开始成为一个重要的研究领域。 1998年亚马逊（Amazon.com）上线了基于物品的协同过滤算法，将推荐系统推向服务千万级用户和处理百万级商品的规模，并能产生质量良好的推荐。 2003年亚马逊的Linden等人发表论文，公布了基于物品的协同过滤算法[3]，据统计推荐系统的贡献率在20%~30%之间[4]。 2005年Adomavicius 等人的综述论文[5] 将推荐系统分为3个主要类别，即基于内容的推荐、基于协同过滤的推荐和混合推荐的方法，并提出了未来可能的主要研究方向。 2006 年10月，北美在线视频服务提供商 Netflix 宣布了一项竞赛，任何人只要能够将它现有电影推荐算法 Cinematch 的预测准确度提高10%，就能获得100万美元的奖金。该比赛在学术界和工业界引起了较大的关注，参赛者提出了若干推荐算法，提高推荐准确度，极大地推动了推荐系统的发展。 2007年第一届ACM 推荐系统大会在美国举行，到2017年已经是第11届。这是推荐系统领域的顶级会议，提供了一个重要的国际论坛来展示推荐系统在不同领域的最近研究成果、系统和方法。 2016年，YouTube发表论文[6]，将深度神经网络应用推荐系统中，实现了从大规模可选的推荐内容中找到最有可能的推荐结果。 近年来，推荐系统被广泛的应用于电子商务推荐、个性化广告推荐、新闻推荐等诸多领域，如人们经常使用的淘宝、今日头条、豆瓣影评等产品。 研究现状经过二十多年的积累和沉淀，推荐系统成功应用到了诸多领域，RecSys会议上最常提及的应用落地场景为：在线视频、社交网络、在线音乐、电子商务、互联网广告等，这些领域是推荐系统大展身手的舞台，也是近年来业界研究和应用推荐系统的重要实验场景。 伴随着推荐系统的发展，人们不仅仅满足于分析用户的历史行为对用户进行建模，转而研究混合推荐模型，致力于通过不同的推荐方法来解决冷启动、数据极度稀疏等问题，国内知名新闻客户端今日头条采用了内容分析、用户标签、评估分析等方法打造了拥有上亿用户的推荐引擎。 移动互联网的崛起为推荐系统提供了更多的数据，如移动电商数据[6]、移动社交数据、地理数据[7]等，成为了社交推荐的新的尝试。 随着推荐系统的成功应用，人们越来越多的关注推荐系统的效果评估和算法的健壮性、安全性等问题。2015年，Alan Said 等人在RecSys会议上发表论[8]，阐述了一种清晰明了的推荐结果评价方式，同年，FrankHopfgartner等人发表论文[9]，讨论了基于流式数据的离线评价方式和对照试验，掀起了推荐算法评估的研究热潮。 近年来，机器学习和深度学习等领域的发展，为推荐系统提供了方法指导。RecSys会议自2016年起开始举办定期的推荐系统深度学习研讨会，旨在促进研究和鼓励基于深度学习的推荐系统的应用。 2017年AlexandrosKaratzoglou等人在论文[10]中介绍了深度学习在推荐系统中的应用，描述了基于深度学习的内容推荐和协同过滤推荐方法，深度学习成为当前推荐系统研究的热点。 推荐方式和效果评估推荐系统在为用户推荐物品时通常有两种方式： 评分预测此方法一般通过学习用户对物品的历史评分，预测用户可能会为他没有进行评分的物品打多少分，通常用于在线视频、音乐等服务的推荐。 评分预测的效果评估一般通过均方根误差（RMSE）和平均绝对误差（MAE）计算。对于测试集T中的一个用户u和物品i，令rui是用户u对物品i的实际评分，而ȓui是推荐系统给出的预测评分，则RMSE定义为： MAE定义为： TopN推荐此方法一般不考虑评分，而是为用户提供一个个性化推荐列表，通过预测用户对物品的兴趣度对列表进行排序，选取其中前N个物品推荐给用户，通常用于电子商务、社交网络、互联网广告推荐。 TopN推荐一般通过准确率（precision）、召回率（recall）和F1值（平衡分数）度量。令R(u)是为用户推荐的物品列表，T(u)是用户在测试集上的行为列表。 召回率定义为： 准确率定义为： F1值定义为： 推荐算法根据推荐系统使用数据的不同，推荐算法可分为基于用户行为推荐、基于内容推荐、基于社交网络推荐等。 主流的推荐系统算法可以分为协同过滤推荐（Collaborative Filtering Recommendation）、基于内容推荐（Content-basedRecommendation）和混合推荐三种。 基于用户行为推荐用户行为蕴藏着很多模式，著名的“啤酒和尿布”的故事就是用户行为模式的良好体现。基于用户行为推荐的主要思想是利用已有用户的历史行为数据（显式反馈或隐式反馈），预测当前用户可能感兴趣的物品，其中显式反馈主要为用户评分，隐式反馈主要包括浏览、搜索等。 基于用户行为的推荐算法也称为协同过滤算法（Collaborative Filtering Recommendation），是推荐领域应用最广泛的算法，该算法不需要预先获得用户或物品的特征数据，仅依赖于用户的历史行为数据对用户进行建模，从而为用户进行推荐。协同过滤算法主要包括基于用户的协同过滤（User-Based CF）、基于物品的协同过滤（Item-Based CF）、隐语义模型（Latent Factor Model）等。其中基于用户和物品的协同过滤是通过统计学方法对数据进行分析的，因此也称为基于内存的协同过滤或基于邻域的协同过滤；隐语义模型是采用机器学习等算法，通过学习数据得出模型，然后根据模型进行预测和推荐，是基于模型的协同过滤。 基于用户的协同过滤（User-Based CF）基于用户的协同过滤（下文简称UserCF）的基本思想为：给用户推荐和他兴趣相似的用户感兴趣的物品。当需要为一个用户A（下文称A）进行推荐时，首先，找到和A兴趣相似的用户集合（用U表示），然后，把集合U中用户感兴趣而A没有听说过（未进行过操作）的物品推荐给A。算法分为两个步骤：首先，计算用户之间的相似度，选取最相似的N个用户，然后，根据相似度计算用户评分。 （1）用户相似度 用户相似度计算基于用户的协同过滤算法的重要内容，主要可以通过余弦相似度、杰卡德系数等方式进行计算。 假设：给定用户u和v，令N(u)表示用户u有过正反馈的物品集合，令N(v)为用户v有过正反馈的物品集合，则用户u和v之间的相似度可以通过如下方式计算： 余弦相似度： 杰卡德系数： （2）用户评分 得到用户相似度后，可以根据如下公式计算用户评分： 其中r(u, i)代表用户u对物品i的评分，S(u)为与用户u最相似的N个用户，N(i)为对物品i进行过操作的用户集合， 为用户u与用户v的相似度， 为用户v对物品i的评分。 UserCF的推荐结果反映了用户所在的一个兴趣群体中的热门物品，更加社会化但缺乏个性化， 能够满足物品的时效性，在新闻推荐领域能够发挥很大的作用。用户的兴趣在一段时间内是相对固定的，因此用户相似度矩阵不会实时进行更新，存在新用户的冷启动问题。 基于物品的协同过滤（Item-Based CF）基于物品的协同过滤（下文简称ItemCF）是目前应用最为广泛的算法，该算法的基本思想为：给用户推荐和他们以前喜欢的物品相似的物品，这里所说的相似并非从物品的内容角度出发，而是基于一种假设：喜欢物品A的用户大多也喜欢物品B代表着物品A和物品B相似。基于物品的协同过滤算法能够为推荐结果做出合理的解释，比如电子商务网站中的“购买该物品的用户还购买了…”。ItemCF的计算步骤和UserCF大致相同：首先，计算物品相似度，选出最相似的N个物品，然后根据相似度计算用户评分。 （1）物品相似度 假设：N(i)为喜欢物品i的用户结合，N(j)为喜欢物品j的用户集合，则物品相似度计算公式可以定义为： 上述公式将物品i和物品j的相似度定义为：同时喜欢物品i、j的用户数占只喜欢物品i用户数的比例，但如果物品j十分热门，大部分用户都很喜欢，那么就会造成所有物品都和j有较高的相似度，因此可以对计算公式进行如下改进： 改进后的相似度计算公式惩罚了物品j的热门度，在一定程度上减少了热门物品为相似度带来的影响。 （2）用户评分 得到物品相似度后，可以根据如下公式计算用户评分： 其中r(u, i)代表用户u对物品i的评分，S(i)代表和物品i最相似的N个物品，N(u)为用户u曾经感兴趣的物品集合， 为物品i和物品j的相似度， 为用户u对物品i的评分。 ItemCF的推荐结果更加个性化，反映了用户的个人兴趣，对挖掘长尾物品有很大帮助，被广泛应用于电子商务系统。在物品数较多时，物品相似度计算效率较差，因此通常以一定的时间间隔离线进行计算，然后将物品相似度数据缓存在内存中，这样一来，便可以根据用户的新行为实时向用户做出推荐。ItemCF同样存在新用户冷启动问题。 隐语义模型（Latent Factor Model）隐语义模型方法是目前应用最为广泛的协同过滤算法之一，在显式反馈（如评分）推荐系统中，能够达到很好的精度。它的基本思想是通过机器学习方法从用户-物品评分矩阵中分解为两个低阶矩阵，表示对用户兴趣和物品的隐含分类特征，通过隐含特征预测用户评分。训练过程中通常采用随机梯度下降（SGD）算法最小化损失函数，最后通过模型预测用户评分。矩阵分解（Matrix Factorization）是隐语义模型最成功的一种实现，假设训练数据为M个用户对N个物品的评分矩阵Rm,n，早期矩阵分解算法BasicSvd步骤如下： （1）给定假设函数 其中k表示矩阵分解的隐含特征数，p和q是两个矩阵，作为模型的参数，分别表示用户、物品与k个隐含特征之间的关系。 （2）最小化损失函数 其中u为用户，i为物品，R为训练数据评分矩阵，H为预测评分矩阵，通过随机梯度下降最小化cost函数，得到矩阵p和q。在最小化的过程中，还需要添加正则项防止过度拟合。 （3）通过用户、物品和隐含特征的关系矩阵p、q预测用户评分 在算法的演进过程中，还出现了FunkSVD[11]、SVD++等矩阵分解算法，它们在隐含特征的基础上考虑了用户评分习惯、历史访问等多种因素，在一些场景中取得了更为精确的结果。 矩阵分解算法采用机器学习的最优化方法训练模型，计算的空间复杂度较小，在评分预测推荐中的精度较高，能够自动挖掘用户和物品的特征，有非常好的扩展性，可以灵活地考虑额外因素。矩阵分解的训练过程需要扫描整个评分矩阵，在用户量和物品数很大的情况下比较费时，但可以离线进行训练，在线进行评分预测，达到推荐的实时性。 基于内容推荐基于内容推荐的基本思想是为用户推荐与他感兴趣的内容相似的物品，比如用户喜欢励志类电影，那么系统会直接为他推荐《阿甘正传》这部电影，这个过程综合考虑了用户兴趣和电影内容，因此不需要提供用户的历史行为数据，这能够很好地解决新用户的冷启动问题。基于内容推荐的关键问题是对用户兴趣特征和物品特征进行建模，主要方法由向量空间模型、线性分类、线性回归等。 基于内容推荐需要预先提供用户和物品的特征数据，比如电影推荐系统，需要提供用户感兴趣的电影类别、演员、导演等数据作为用户特征，还需要提供电影的内容属性、演员、导演、时长等数据作为电影的特征，这些需要进行预处理的数据在实际应用中往往有很大的困难，尤其是多媒体数据（视频、音频、图像等），在预处理过程中很难对物品的内容进行准确的分类和描述，且在数据量很大的情况下，预处理效率会很低下。针对以上不足，[25]提出了基于标签的推荐方法，可以由专家或用户为物品打标签，实现对物品的分类。 基于内容产生的推荐往往和用户已经处理的物品具有很大的相似度，不利于用户在推荐系统中获得惊喜，这也是推荐系统的一个重要研究方向。 混合推荐推荐算法虽然都可以为用户进行推荐，但每一种算法在应用中都有不同的效果。UserCF的推荐结果能够很好的在广泛的兴趣范围中推荐出热门的物品，但却缺少个性化；ItemCF能够在用户个人的兴趣领域发掘出长尾物品，但却缺乏多样性；基于内容推荐依赖于用户特征和物品特征，但能够很好的解决用户行为数据稀疏和新用户的冷启动问题；矩阵分解能够自动挖掘用户特征和物品特征，但却缺乏对推荐结果的解释，因此，每种推荐方法都各有利弊，相辅相成。 实际应用的推荐系统通常都会使用多种推荐算法，比如使用基于内容或标签的推荐算法来解决新用户的冷启动问题和行为数据稀疏问题，在拥有了一定的用户行为数据后，根据业务场景的需要综合使用UserCF、ItemCF、矩阵分解或其他推荐算法进行离线计算和模型训练，通过采集用户的社交网络数据、时间相关数据、地理数据等综合考虑进行推荐，保证推荐引擎的个性化，提高推荐引擎的健壮性、实时性、多样性和新颖性。让推荐系统更好地为用户服务。 总结和展望本文首先回顾了推荐系统发展的历史，并分析了当前推荐系统的研究现状，其次阐述了主要的推荐方式和推荐结果的评估指标，最后分析了主流的推荐算法以及它们各自的优缺点。 推荐系统的发展一方面精确的匹配了用户与信息，降低了人们在信息过载时代获取信息的成本，但由推荐系统主导的内容分发，如新闻推荐等，也为用户带来了消极影响。2017年9月19日，人民日报点名批评国内知名内容分发平台今日头条，强调别以技术之名糊弄网民和群众，可见推荐系统的发展不仅需要满足用户多元化、个性化的需求，而且需要对信息进行严格的监管和过滤，提高推荐系统的健壮性。近年来，RecSys会议上越来越多地收录了关于用户隐私、推荐引擎健壮性、信息过滤等方面的论文，这是未来推荐系统发展的一个重要研究方向。 目前，深度神经网络发展迅速，为推荐系统提供了新的特征提取、排序方法，越来越多的推荐引擎将深度神经网络与传统的推荐算法进行了结合，用于解决数据稀疏、推荐排序等问题，深度神经网络和推荐系统的结合将是推荐系统未来的主要研究方向。 综上所述，推荐系统是一个庞大的信息系统，它不仅仅只依赖于推荐引擎的工作，而且依赖于业务系统、日志系统等诸多方面，并结合了网络安全、数据挖掘等多个研究领域，能够为企业和用户带来价值，是一个值得深入研究的领域。 参考文献[1] Resnick P,Iacovou N, Suchak M, et al. GroupLens: an open architecture for collaborativefiltering of netnews[C] Proceedings of the 1994 ACM Conference on ComputerSupported Cooperative Work, Oct 22-26, 1994. New York, NY, USA: ACM, 1994:175-186. [2] Resnick P, Varian H R. Recommender systems[J].Communications of the ACM, 1997, 40(3): 56-58. [3] G. Linden, B. Smith, and J. York, “Amazon.comRecommendations: Item-to-Item Collaborative Filtering,” IEEE InternetComputing, vol. 7, no. 1, 2003, pp. 76–80. [4] Linden G, Smith B, York J. Amazon.comrecommendations: item-to-item collaborative filtering[J]. IEEE Internet Computing,2003, 7(1): 76-80. [5] Adomavicius G, Tuzhilin A. Toward the nextgeneration of recommender systems: a survey of the state-of-the-art and possibleextensions[J]. IEEE Transactions on Knowledge and Data Engineering, 2005,17(6): 734-749. [6] Cremonesi P, Tripodi A, Turrin R. Cross-DomainRecommender Systems.[C] IEEE, International Conference on Data MiningWorkshops. IEEE, 2012:496-503. [7] Huiji Gao, Jiliang Tang, Huan Liu. Personalizedlocation recommendation on location-based social networks[J]. 2014:399-400. [8] Said A. Replicable Evaluation of RecommenderSystems[C] ACM Conference on Recommender Systems. ACM, 2015:363-364. [9] Hopfgartner F, Kille B, Heintz T, et al.Real-time Recommendation of Streamed Data[C] ACM Conference on RecommenderSystems. ACM, 2015:361-362. [10] Karatzoglou A, Hidasi B. Deep Learning forRecommender Systems[C] the Eleventh ACM Conference. ACM, 2017:396-397. [11] Simon Funk. Funk-SVD [EB/OL]. http://sifter.org/~simon/journal/20061211.html,2006-12-11 [12] 朱扬勇, 孙婧. 推荐系统研究进展[J]. 计算机科学与探索, 2015, 9(5):513-525. [13] 杨阳, 向阳, 熊磊. 基于矩阵分解与用户近邻模型的协同过滤推荐算法[J]. 计算机应用, 2012,32(2):395-398. [14] 项亮. 推荐系统实践[M]. 北京: 人民邮电出版社, 2012.]]></content>
      <categories>
        <category>推荐系统</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
        <tag>综述</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tensorflow卷积神经网络（CNN）手写数字识别示例学习]]></title>
    <url>%2F2019%2F04%2F10%2FTensorflow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN%EF%BC%89%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A4%BA%E4%BE%8B%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[问题描述利用卷积神经网络将MNIST数据集的28×28像素的灰度手写数字图片识别为相应的数字。 数据描述MNIST数据集是28×28像素的灰度手写数字图片，其中数字的范围从0到9 具体如下所示（参考自Tensorflow官方文档）： 文件 内容 train-images-idx3-ubyte.gz 训练集图片，55000张训练图片, 5000张验证图片 train-labels-idx1-ubyte.gz 训练集图片对应的数字标签 t10k-images-idx3-ubyte.gz 测试集图片，10000张图片 t10k-labels-idx1-ubyte.gz 测试集图片对应的数字标签 网络结构卷积神经网络一般包含以下几层： 输入层：用于将数据输入到神经网络中 卷积层：使用卷积核提取特征 激励层：对卷积操作的线性运算进行非线性映射 池化层：卷积得到的特征图进行稀疏处理，减少数据量 全连接层：在网络的末端进行重新拟合，恢复特征，减少特征的损失 输出层：输出结果 输入层卷积神经网络中输入层的结构可以是多维的，例如MNIST数据集中是28×28像素的灰度图片，因此输入为28×28的的二维矩阵。 卷积层卷积层是使用卷积核提取特征，在卷积层中需要理解局部感受野和共享权值。 局部感受野：类似于一个滑动窗口，以窗口的范围去提取对应范围的神经元携带的特征。 共享权值：根据局部感受野提取特征，原始数据中的一部分神经元与卷积层中的一个神经元相连接，每一条线对应一个权重，而在卷积层中，对于同一个卷积核，权重是相同的。 上图为卷积操作示意图（图片来源于网络，侵删），其中Image表示图片数据矩阵，游走的窗口为卷积核矩阵，x0、x1表示的是权重，一个N×N的图像经过M×M的卷积核卷积后将得到（N-M+1）×（N-M+1）的输出。 卷积后输出的矩阵数据成为特征映射图，一个卷积核输出一个特征映射图，卷积操作是一种线性计算，因此通常在卷积后进行一次非线性映射。 池化层池化层是将卷积得到的特征映射图进行稀疏处理，减少数据量，操作与卷积基本相似，不同的是卷积操作是一种线性计算，而池化的计算方法更多样化，一般有如下计算方式： 最大池化：取样池中的最大值作为池化结果 均值池化：取样池中的平均值作为池化结果 还有重叠池化、均方池化、归一化池化等方法。 全连接层在网络的末端对提取后的特征进行恢复，重新拟合，减少因为特征提取而造成的特征丢失。全连接层的神经元数需要根据经验和实验结果进行反复调参。 输出层输出层用于将最终的结果输出，针对不同的问题，输出层的结构也不相同，例如MNIST数据集识别问题中，输出层为有10个神经元的向量。 示例网络结构示例模型包括输入层、两个卷积层、两个池化层、全连接层和输出层，其中卷积和池化操作的特征图输出大小计算公式为： ImageWidth：图片宽度 Padding：边缘补齐像素数 KernelSize：卷积核宽度 Stride：移动步长 具体模型结构如下所示： 程序解读Tensorflow中使用图来表示计算任务，在会话(Session)中执行图，使用 tensor 表示数据.通过变量(Variable)维护状态，使用 feed 和 fetch 可以为任意的操作赋值或者从其中获取数据. 加载MNIST数据集1mnist =input_data.read_data_sets(&quot;MNIST_data&quot;, one_hot=True) 命令会自动下载MNIST数据集，存放在”MNIST_data”目录下，也可以手动下载数据集后放入此目录下。执行read_data_sets()函数后将会返回一个DataSet实例，其中包含训练数据、验证数据和测试数据。 创建Session和占位符123sess =tf.InteractiveSession()x =tf.placeholder(&quot;float&quot;, shape=[None, 784])y_ =tf.placeholder(&quot;float&quot;, shape=[None, 10]) x和y_都是tensor，其中x表示输入数据，由于是28×28像素的灰度图片，因此输入为784维的向量。y_表示模型输出，为0-9的数字，因此是10维的向量。 定义卷积层1的权重和偏置量12w_conv1 = tf.Variable(tf.truncated_normal([5,5, 1, 32], stddev=0.1))b_conv1 =tf.Variable(tf.constant(0.1, shape=[32])) 卷积操作的计算公式为：W × X + b [5, 5, 1,32]表示卷积核的大小为5×5，输出为32，即共有32个卷积核，卷积操作会产生32个特征映射图。 其中w_conv1表示权重W，由正太分布截取得出。b_conv1表示偏置量，初始值均为0.1，由于卷积操作会输出32个特征图，因此偏置量的维度为32。 卷积层11x_image =tf.reshape(x, [-1,28,28,1]) 将输入tensor x 调整成为28×28矩阵形式。12r_conv1 = tf.nn.conv2d(x_image,w_conv1, strides=[1, 1, 1, 1], padding=&apos;SAME&apos;) + b_conv1h_conv1 = tf.nn.relu(r_conv1) 进行卷积操作W × X + b，得到线性变化的结果r_conv1，再利用Tensorflow的relu规则进行非线性映射，出的卷积的结果h_conv1。 池化层11h_pool1 = tf.nn.max_pool(h_conv1,ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&apos;SAME&apos;) 采用了最大池化方法，其中ksize表示取样池的大小，strides表示步长，padding表示边缘补齐方法，SAME方式会在图片边缘补0，补齐边缘像素为1，最终得出池化结果h_pool1。 定义卷积层2的权重和偏置量12w_conv2 =tf.Variable(tf.truncated_normal([5, 5, 32, 64], stddev=0.1))b_conv2 =tf.Variable(tf.constant(0.1, shape=[64])) 卷积层2的输入为32张特征映射图，有64个卷积核，最终将输出64个特征映射图。 卷积层2和池化层2123r_conv2 = tf.nn.conv2d(h_pool1,w_conv2, strides=[1, 1, 1, 1], padding=&apos;SAME&apos;) + b_conv1h_conv2 =tf.nn.relu(r_conv2)h_pool2 = tf.nn.max_pool(h_conv2,ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&apos;SAME&apos;) 经过卷积层2和池化层2后，得到64张7×7的特征映射图。 全连接层12W_fc1 =tf.Variable(tf.truncated_normal([7 * 7 * 64, 1024], stddev=0.1))b_fc1 =tf.Variable(tf.constant(0.1, shape=[1024])) 全连接层设有1024个神经元，本层的神经元数需要根据经验和实验结果进行反复调参确定。12h_pool2_flat= tf.reshape(h_pool2, [-1, 7*7*64])h_fc1 =tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1) 将第二层池化后的数据调整为7×7×64的向量，与全连接层的权重进行矩阵相乘，然后进行非线性映射得到1024维的向量。 输出层123W_fc2 = tf.Variable(tf.truncated_normal([1024,10], stddev=0.1))b_fc2 = tf.Variable(tf.constant(0.1,shape=[10]))y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2) + b_fc2) 输出层为10维的向量，通过softmax函数输出。 参考资料深度学习（四）卷积神经网络入门学习(1)深度学习之卷积神经网络CNN及tensorflow代码实现示例TensorFlow 官方文档 源码地址：Tensorflow卷积神经网络（CNN）手写数字识别]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>卷积神经网络</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[遗传算法求解TSP问题]]></title>
    <url>%2F2019%2F04%2F10%2F%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述旅行商问题是图论中的一个经典问题。 假设有一个旅行商人要拜访N个城市，要求他从一个城市出发，每个城市最多拜访一次，最后要回到出发的城市，保证所选择的路径长度最短。 算法描述算法简介遗传算法（GeneticAlgorithm）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，通过模拟自然进化过程搜索最优解。遗传算法是从代表问题可能潜在的解集的一个种群（population）开始的，初代种群产生之后，按照适者生存和优胜劣汰的原理，逐代（generation）演化产生出越来越好的近似解，在每一代，根据问题域中个体的适应度（fitness）大小选择个体，并借助于自然遗传学的遗传算子（genetic operators）进行组合交叉（crossover）和变异（mutation），产生出代表新的解集的种群。这个过程将导致种群像自然进化一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过解码（decoding），可以作为问题近似最优解。（摘自百度百科）。 遗传算子遗传算法中有选择算子、交叉算子和变异算子。 选择算子用于在父代种群中选择进入下一代的个体。 交叉算子用于对种群中的个体两两进行交叉，有Partial-Mapped Crossover、Order Crossover、Position-based Crossover等交叉算子。 变异算子用于对种群中的个体进行突变。 算法步骤遗传算法的基本运算过程如下： 初始化：设置进化代数计数器t=0、设置最大进化代数T、交叉概率、变异概率、随机生成M个个体作为初始种群P 个体评价：计算种群P中各个个体的适应度 选择运算：将选择算子作用于群体。以个体适应度为基础，选择最优个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代 交叉运算：在交叉概率的控制下，对群体中的个体两两进行交叉 变异运算：在变异概率的控制下，对群体中的个体两两进行变异，即对某一个体的基因进行随机调整 经过选择、交叉、变异运算之后得到下一代群体P1。 重复以上1-6，直到遗传代数为T，以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。 求解说明优化目标给定二维数据int[][]pos用于存储各个城市的坐标，采用欧式距离代表城市之间的距离。利用遗传算法，找到不重复遍历所有城市的路径中，所走距离最短的路径。 选择算子选择算子采用轮盘赌选择，以每个个体的适应度为基础，为每个个体计算累积概率。 个体1、2、3、4的个体适应度如上图所示。 适应度计算规则：染色体代表的路径实际距离作为个体的适应度，如下（distence[x][y]表示城市x到y的距离） 染色体 0 2 1 3，适应度为distence[0][2] + distence[2][1] + distence[1][3] + distence[3][0] qa 表示个体a的累积概率，如上图所示个体1、2、3、4的累积概率分别为0.14、0.53、0.69、1 随机生成一个0到1的浮点数f，若 qa &lt; f &lt;= qb，则个体b被选中。 交叉算子Partial-Mapped Crossover（部分映射交叉）Order Crossover（顺序交叉）Position-based Crossover（基于位置的交叉） 变异算子变异算子随机进行多次，每次在个体基因序列中选择两个位置的基因进行交换。 参考资料用遗传算法求解TSP问题 源码地址：遗传算法求解TSP问题（参考自 基于遗传算法求解TSP问题（JAVA））]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
        <tag>TSP问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用极小极大搜索和alpha-beta剪枝算法预测五子棋对弈落子]]></title>
    <url>%2F2019%2F04%2F10%2F%E5%88%A9%E7%94%A8%E6%9E%81%E5%B0%8F%E6%9E%81%E5%A4%A7%E6%90%9C%E7%B4%A2%E5%92%8Calpha-beta%E5%89%AA%E6%9E%9D%E7%AE%97%E6%B3%95%E9%A2%84%E6%B5%8B%E4%BA%94%E5%AD%90%E6%A3%8B%E5%AF%B9%E5%BC%88%E8%90%BD%E5%AD%90%2F</url>
    <content type="text"><![CDATA[问题描述利用极小极大搜索和alpha-beta剪枝算法预测五子棋落子问题，初始棋局如图所示，AI为白子，玩家为黑子，当前由AI落子。 算法描述极小化极大算法极小化极大搜索是一种在有限的深度范围内搜索博弈树的求解方法，程序代表AI方MAX节点，目的是打败玩家，基本原理为： （1）轮到MIN落子时，MAX节点考虑最坏的情况，即评估函数取极小值。 （2）轮到MAX落子时，MAX节点考虑最好的情况，即评估函数取极大值。 （3）搜索到叶子节点进行回溯，代表双方的对抗策略，交替使用（1）（2）规则回溯到root节点即可得到评估值。 123456789101112function minimax(node, depth) // 给定初始状态和搜索深度 if node is a terminal node or depth = 0 return the evaluate value of the node //使用评估函数返回局面得分 if player’s turn // 玩家走棋，是极小节点，选择一个得分最小的走法 let val := +∞ foreach child of node val := min(val, minimax(child, depth-1) else AI’s turn //AI走棋，是极大节点，选择一个得分最大的走法 let val := -∞ foreach child of node val := max(val, minimax(child, depth-1)) return val; Alpha-beta算法极小化极大算法的搜索效率非常低下，而Alpha-beta剪枝算法能够提高搜索效率，基本原理为： （1）alpha剪枝：任何极小层（由MIN落子）的节点的beta值都不大于其前驱节点（MAX节点）的alpha值，即搜索过程中，只要找到一个MIN节点的评估值不大于其前驱MAX节点的评估值，则可舍弃后续的搜索，这表示当前MIN节点落子对MAX是有利的。 （2）beta剪枝：任何极大层（由MAX落子）的节点的alpha值都不小于其前驱节点（MIN节点）的beta值。即搜索过程中，只要找到一个MAX节点的评估值不小于其前驱MIN节点的评估值，则可舍弃后续的搜索，这表示当前MAX节点落子对MAX是有利的。 12345678910111213141516function alphaBeta(node, alpha, beta , depth) if node is a terminal node or depth = 0 return the evaluate value of node //使用评估函数返回局面得分 else if AI’s turn foreach child of node val := alphaBeta(child, alpha, beta, depth-1) if(val &gt; alpha) alpha:= val if(alpha &gt;= beta) break return alpha else player’s turn foreach child of node val := alphaBeta(child, alpha, beta, depth-1) if(val &lt; beta) beta:= val if(alpha &gt;= beta) break return beta 评估函数评估函数用于对博弈树中的叶子节点的状态进行评估，需要考虑五子棋中的基本棋型和特点，对叶子节点的棋局进行评估，给出评估值。 五子棋中的基本棋型（1代表AI落子，2代表玩家落子，0代表空位）： （1）连五：五颗同色棋子连在一起，如11111，22222 （2）活四：有两个点可以形成连五，如011110，022220 （3）冲四：有一个点可以形成连五，如011112，122220 （4）活三：可以形成活四的三点，如001110，002220 （5）眠三：只能形成冲四的三点，如001112，002221 （6）活二：能够形成活三的二点，如000110，000220 （7）眠二：能够形成眠三的二点，如000112，000221 在程序中可以某一坐标为中心，将改坐标点横竖撇捺四个方向的状态拼接为字符串，判断字符串是否包含上述的某种棋型作为判断标准。 由于算法是针对AI而言，因此在评估函数中，对玩家方赋予负值，AI方赋予正值。对于棋盘中的落子，从横竖撇捺四个方向判断形成的基本棋型，对不同的棋型赋予不同的权重，如连五代表一方胜利，赋予最大值代表AI胜利，赋予最小值代表玩家胜利。 根据棋型的重要性，划分权重如下（AI权重为正，玩家权重为负）： 棋型 权重 连五 100000000 活四 10000000 冲四 1000000 活三 100000 眠三 10000 活二 1000 眠二 1000 活二 100 仅一 10 无 1 （一）评估函数v1 在评估过程中，计算AI所有落子位置横竖撇捺四个方向形成的棋型，得出评估值作为叶子节点的评估值。 效果：此种评估方式效果很差，仅对AI落子点进行判断过于片面，且会造成急于进攻疏于防守的局面。 （二）评估函数v2 在评估过程中，将棋盘中的所有落子的评估值相加得出最后的评估值。最终得到的评估值实际为AI落子形成的棋局评估值减玩家落子形成的棋局评估值。按此计算的目的是平衡进攻和防守。以叶子节点的评估值进行回溯，进而选择初始状态的下一步落子。 效果：评估结果较好，能够平衡进攻和防守。 参考资料五子棋基本棋型及其特点Alpha-beta剪枝极小极大搜索方法、负值最大算法和Alpha-Beta搜索方法五子棋的核心算法Alpha-Beta搜索最小-最大搜索五子棋AI算法第四篇-启发式搜索函数 源码地址：利用极小极大搜索和alpha-beta剪枝算法预测五子棋对弈落子]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>极小极大搜索</tag>
        <tag>alpha-beta剪枝</tag>
        <tag>博弈树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A*算法求解15数码问题]]></title>
    <url>%2F2019%2F04%2F10%2FA%E6%98%9F%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A315%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述利用A*算法进行表1到表2的转换，要求空白块移动次数最少。 转换规则为：空白块只可以与上下左右四个方向的相邻数字交换。 算法简介A*算法是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法。该算法综合了Best-First Search和Dijkstra算法的优点：在进行启发式搜索提高算法效率的同时，基于评估函数计算损失，保证找到一条最优路径。 算法能否找到最优解的关键在于评估函数的选择，A*算法的评估函数表示为：f(n) = g(n) + h(n) f(n) 是从初始状态经由状态n到目标状态的代价估计 g(n) 是在状态空间中从初始状态到状态n的实际代价 h(n) 是从状态n到目标状态的最佳路径的估计代价 例如在8数码问题中，g(n) 表示状态空间树中搜索的层数，h(n) 表示状态n与目标状态中元素位置不同的元素个数。 算法步骤设定两个集合，open集，close集 将起始点加入open集（设置父亲节点为空） 在open集中选着一个f(n)值最小的节点作为当前节点 2.1. 将当前节点从open集中移除，添加到close集 2.2. 如果当前节点为终点节点，那么结束搜索 2.3. 处理当前节点的所有邻接节点，规则如下： 如果不在open集中，那么就将其添加到open集，并将该节点的父节点为当前节点 如果已经添加到open集中，重新计算f(n)值，如果f(n)值小于先前的f(n)值，那么就更新open集中相应节点的f(n) 如果该节点不可通过或者已经被添加到close集，那么不予处理 如果open集不为空，那么转到步骤2继续执行。 评估函数f(n) = 状态n状态空间树中的搜索深度 + 状态n与目标状态不同的元素个数 效果：与8数码问题使用了相同的评估函数，大概跑了30W步无法求出解 评价：效果极差，15数码问题的状态空间树要远复杂于8 数码问题，且15数码问题中空白块的移动更为复杂，此评估函数不适用。 f(n) = 状态n状态空间树中的搜索深度 + 状态n与目标状态各个位置数字偏差的绝对值 效果：随着搜索的进行，空白块的移动集中在表格上部，表格下部几乎不移动 ，无法求出解 评价：因为下部数字较大，移动后差值较大造成评估值较大，因此搜索集中在了数值较小的部分，效果很差。 f(n) = 状态n状态空间树中的搜索深度 + 状态n与目标状态各个元素的路径差值（一维数组各元素的距离差之和） 效果：空白块最终移动55步得到目标状态。 评价：效果比较理想，但h(n)还可继续优化。 f(n) = 状态n状态空间树中的搜索深度 + 状态n与目标状态各个元素的曼哈顿距离 效果：空白块最终移动41步得到目标状态。 评价：效果理想。 实际上，1和2的评估函数效果大致相同，都将搜索局限在了一部分导致无法计算出问题的解。3实际是以一维数组各元素的距离差之和估计状态n到目标状态的曼哈顿距离，但此估计方式和计算平面两点的曼哈顿距离存在较大误差，因此只求解出可行解。 参考资料A*算法详解，看完后全懂了启发式搜索浅谈，解决八数码问题 源码地址：A*算法求解15数码问题]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>15数码</tag>
        <tag>A*算法</tag>
      </tags>
  </entry>
</search>
